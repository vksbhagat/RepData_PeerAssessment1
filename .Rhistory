mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
install.packages("Hmisc")
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
install.packages("RColorBrewer")
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
library(JPEG)
library(Jpeg)
library(jpeg)
img.n<-readJPEG("jeff.jpg",TRUE)
quantile(img.n,probs=c(0.3,0.8))
gdp <- read.csv("./gdp.csv")
edu <- read.csv("./edu.csv")
X=CountryCode
X="CountryCode"
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
head(gdp)
head(gdp, 10)
head(gdpclean)
gdpclean(,1)
name(gdpclean[,1])
names(gdpclean[,1])
names(gdpclean[,2])
names(gdpclean)
head(gdpclean(Gross.domesic.product.2012))
gdpclean(Gross.domesic.product.2012)
head(gdpclean$Gross.domesic.product.2012)
gdpclean$Gross.domesic.product.2012
gdpclean
mergedData$Gross.domestic.product.2012
mergeddata
head(mergedData)
mergedData[order()]
mergedData$Gross.domestic.product.2012
mergedData[order(mergedData$Gross.domestic.product.2012)]
mergedData[order(mergedData$Gross.domestic.product.2012),]
desc <- mergedData[order(mergedData$Gross.domestic.product.2012),]
head(desc)
mergedData[mergedData$Gross.domestic.product.2012 = 13]
class(mergedData$Gross.domestic.product.2012)
mergedData[mergedData$Gross.domestic.product.2012 == 13]
mergedData[mergedData$Gross.domestic.product.2012 %in% 13]
mergedData[mergedData$Gross.domestic.product.2012 = 13,]
mergedData[mergedData$Gross.domestic.product.2012 == 13,]
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
summary(mergedData)
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
summary(mergedData[mergedData$Income.Group== "High income: nonOECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
gdp <- read.csv("./gdp.csv")
edu <- read.csv("./edu.csv")
gdpclean<-gdp[5:330,]
gdpclean<-gdp[5:400,]
gdpclean<-gdp[5:330,]
gdpclean<-gdp[5:334,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
desc <- mergedData[order(mergedData$Gross.domestic.product.2012),]
mergedData[mergedData$Gross.domestic.product.2012 == 13,]
X=CountryCode
X="CountryCode"
gdpclean<-gdp[5:334,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
desc <- mergedData[order(mergedData$Gross.domestic.product.2012),]
mergedData[mergedData$Gross.domestic.product.2012 == 13,]
gdp <- read.csv("./gdp.csv")
edu <- read.csv("./edu.csv")
head(gdp)
head(edu)
X = "CountryCode"
X = "CountryCode"
X = "CountryCode"
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
mergedData=as.data.frame(merge(gdp,edu,by.x="X",by.y="CountryCode"))
head(mergedData)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "acs.csv")
library(sqldf)
acs <- read.table("./acs.csv",sep=",",header=TRUE)
agricultureLogical<-(acs$ACR==3 & acs$AGS==6)
which(agricultureLogical)
class(agricultureLogical)
img.n<-readJPEG("jeff.jpg",TRUE)
quantile(img.n,probs=c(0.3,0.8))
install.packages("jpeg")
library(jpeg)
img.n<-readJPEG("jeff.jpg",TRUE)
quantile(img.n,probs=c(0.3,0.8))
gdp <- read.csv("./gdp.csv")
edu <- read.csv("./edu.csv")
X=CountryCode
X = "CountryCode"
gdpclean<-gdp[5:194,]
mergedData=as.data.frame(merge(gdpclean,edu,by.x="X",by.y="CountryCode"))
mergedData$Gross.domestic.product.2012 = as.numeric(as.character(mergedData$Gross.domestic.product.2012))
summary(mergedData[mergedData$Income.Group=="High income: OECD",])
quantile(mergedData$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
mergedData$gdp=cut2(mergedData$Gross.domestic.product.2012,g=5)
table(mergedData$Income.Group,mergedData$gdp)
View(edu)
library(plyr)
library(ggplot
library(ggplot)
library(plyr)
library(ggplot)
library(plyr)
library(ggplot2)
q()
install.packages("knitr")
help "weeksdays()"
help "install"
help "install()"
find "install"
getwd()
ls
pwd
list
ls -R
ls -e
ls -r
list.file()
list.files()
getwd()
setwd("C:/Users/Vivek Bhagat/Documents/GitHub/RepData_PeerAssessment1")
getwd()
setwd("GitHub/RepData_PeerAssessment1")
setwd("C:/Users/Vivek Bhagat/Documents/")
getwd()
setwd("setwd("GitHub/RepData_PeerAssessment1")
setwd("GitHub/RepData_PeerAssessment1")
pwd
pwd()
getwd()
list.files()
activity <- read.csv(unz("activity.zip"))
activity <- read.csv(unz("activity.zip", "activity.csv"))
summary(activity)
unzip("activity.zip")
activity <- read.csv("activity.zip")
activity <- read.csv("activity.csv")
summary(activity)
ls(activity)
names(actvity)
names("actvity")
x = 1
names(x)
str(activity)
names("activity")
names(activity)
levels(activity)
levels(activity$steps)
levels(activity$date)
levels(activity$interval)
names(activity)
str(activity)
head(activity)
head(activity, n = 10)
head(activity, n = 100)
activity
head(activity, n = 100)
head(activity, n = 10)
str(activity)
sum(levels(activity$data))
levels(activity$data)
levels(activity$date)
str(activity)
str(activity)
class(activity)
class(activity$steps)
class(activity$date)
class(activity$intervals)
class(activity$interval)
activityAgg <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
activityAgg
library(dplyr)
total.steps.per.day <- amd %.% group_by(date) %.% summarise(total = sum(steps,
na.rm = T))
tapply(activity$steps, activity$date, sum, na.rm=T)
activityAgg <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
activityagg <- tapply(activity$steps, activity$date, sum, na.rm=T)
class(activityAgg)
str(activityAgg)
str(activityagg)
names(activityAgg)
names(activityagg)
class(activityAgg$)
class(activityAgg[1])
class(activityAgg[2])
class(activityAagg[2])
class(activityagg[2])
class(activityagg[1]])
class(activityagg[1])
activityPerDay <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
setwd("GitHub/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activityPerDay <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
activityPerDay2 <- tapply(activity$steps, activity$date, sum, na.rm=T)
dim(activityPerDay)
dim(activityPerDay2)
summary(activityPerDay)
summary(activityPerDay2)
head(activityPerDay)
head(activityPerDay2)
tail(activityPerDay)
tail(activityPerDay2)
activityPerDay <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
activityPerDay2 <- tapply(activity$steps, activity$date, sum, na.rm=T)
hist(totalSteps, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
hist(activityPerDay2, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
class(activityPerDay)
class(activityPerDay2)
x <- array(activityPerDay)
hist(x, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
class(x)
x <- array(activityPerDay)
x
names(x)
hist(x, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
class(activityPerDay$steps)
class(activityPerDay$date)
activityPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
activityPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
activityPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Total Number of Steps")
median(activityAgg$steps)
median(activityPerDay$steps)
median(activityPerDay)
mean(activityPerDay)
activityPerDay <- aggregate(steps ~ date, activity, sum, na.rm = TRUE)
mean(activityPerDay$steps)
median(activityPerDay$steps)
activityPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
mean(activityPerDay)
median(activityPerDay)
getwd()
activity <- read.csv("activity.csv")
activityPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
mean(activityPerDay)
median(activityPerDay)
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "activity.zip")
activity <- read.csv("activity.csv")
activityPerDay <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Average Total Number of Steps")
mean(activityPerDay)
median(activityPerDay)
```{r Loading & Processing, results='asis'}
```{r Loading & Processing, results='asis'}
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Total Number of Steps")
hist(activityPerDay, breaks = 10, col = "red", main = "Distribution of the total Number of steps each day", xlab = "Total Number of Steps")
plot(mean(activityPerDay))
activityPerDayAvg = tapply(activity$steps, activity$interval, mean, na.rm = T)
plot(activityPerDayAvg), type="l", main = "Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days", xlab = "5-min interval", ylab= "Average Number of Steps")
plot(activityPerDayAvg, type="l", main = "Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days", xlab = "5-min interval", ylab= "Average Number of Steps")
library(ggplot2)
ggplot(activityPerDayAvg, aes(x=interval,y=steps)) + geom_line(color="blue",size=1) + ggtitle("Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days") + labs(x="Interval",y="Average Number of Steps")
activityPerDayAvg <- aggregate(steps ~ interval, activity, mean, na.rm = TRUE)
# ggplot(activityPerDayAvg, aes(x=interval,y=steps)) + geom_line(color="blue",size=1) + ggtitle("Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days") + labs(x="Interval",y="Average Number of Steps")
activityPerDayAvg <- aggregate(steps ~ interval, activity, mean, na.rm = TRUE)
ggplot(activityPerDayAvg, aes(x=interval,y=steps)) + geom_line(color="blue",size=1) + ggtitle("Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days") + labs(x="Interval",y="Average Number of Steps")
activityPerDayAvg = tapply(activity$steps, activity$interval, mean, na.rm = T)
# Plot the time series graph of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
plot(activityPerDayAvg ~ unique(activity$interval), type="l", main = "Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days", xlab = "5-min interval", ylab= "Average Number of Steps")
activityImputing <- activity
for (i in 1:nrow(activity))
{
if(is.na(activity$steps[i]))
{
activityImputing$steps[i] <- activityPerDayAvg[[as.character(activity[i, "interval"])]]
}
}
summary(activity)
summary(activityImputing)
sum(is.na(activityImputing))
head(activity)
head(activityImputing)
activity[1, "interval"]
activity[2, "interval"]
head(activityPerDayAvg)
summary(activityPerDayAvg)
weekdays.activity <- weekdays(activityImputing)
weekdays.activity <- weekdays(activityImputing$interval)
class(activity)
class(activityImputing)
names(activityImputing)
head(activityImputing)
weekdays.activity <- weekdays(activityImputing$date)
class(activityImputing$dates)
class(activityImputing$date)
date
Date()
date()
class(date())
head(activity)
x <- acivity
x <- activity
x$date <- date(activity$date)
x$date <- date(x$date)
name(activity)
names(activity)
x$date <- as.Date(activity$date, "%Y-%m-%d")
str(x)
y <- weekends(x)
y <- weekdays(x)
y <- weekdays(x$date)
y
View(x)
View(x)
x <- activity
x <- c(x, days)
x <- c(x, "days")
x
summary(x)
class(x)
x <- activity
x$date <- as.Date(x$date, %Y-%m-%d)
x$date <- as.Date(x$date, "%Y-%m-%d")
x$Date <- as.Date(x$date, "%Y-%m-%d")
names(x)
x <- activity
x$date <- as.Date(x$date, "%Y-%m-%d")
activityWeekdays <- activityImputing
activityWeekdays$date <- as.Date(activityWeekdays$date, "%Y-%m-%d")
activityWeekdays$whichDay <- weekdays(activityWeekdays$date)
str(activityWeekdays)
norm <- function(x) sqrt(x%*%x)
norm
norm(1:4)
norm(1)
norm(2)
norm(3)
norm(1:2))
norm(1:2)
x <- 1:100
y <- 100:1
par(mfrow = c(1,2))
plot(x)
plot(y)
par(mfrow = c(2,1))
plot(x)
par(mfrow = c(2,1))
plot(x)
plot(y)
plot(x,y)
names(activityWeekdays)
activityDayType <- activityImputing
activityDayType$whichDay <- weekdays(activityDayType$date)
activityDayType <- activityImputing
activityDayType$whichDay <- weakdays(activityDayType$date)
activityDayType <- activityImputing
activityDayType$date <- as.Date(activityDayType$date, "%Y-%m-%d")
activityDayType$whichDay <- weekdays(activityDayType$date)
str(activityDayType)
x <- activityImputing
x[1,1]
x[1,3]
x[1,2]
class(x[1,2])
nrow(x)
for (i in 1 : nrow(x))
{
if (weekdays(activityDayType[i,2]) %in% c("Saturday", "Sunday"))
{
activityDayType[i,4] <- "Weekday"
}
else
{
activityDayType[i,4] <- "weekend"
}
}
for (i in 1 : nrow(x))
{
if (weekdays(activityDayType[i,2]) %in% c("Saturday", "Sunday"))
{
activityDayType[i,4] <- "Weekend"
}
else
{
activityDayType[i,4] <- "weekday"
}
}
head(activityDayType)
head(activityWeekdays)
head(activityWeekdays, n = 10)
tail(activityWeekdays, n = 10)
tail(activityWeekdays, n = 100)
tail(activityWeekdays, n = 1000)
head(activityWeekdays)
activityWeekdays
activityDayType
activityDayType <- activityImputing
activityDayType$date <- as.Date(activityDayType$date, "%Y-%m-%d")
for (i in 1 : nrow(x))
{
if (weekdays(activityDayType[i,2]) %in% c("Saturday", "Sunday"))
{
activityDayType[i,4] <- "Weekend"
}
else
{
activityDayType[i,4] <- "weekday"
}
}
activityDayType
names(activityDayType)
names(activityDayType$v4) <- "daytype"
class(activityDayType)
a <- data.frame(x=1:3, y=3:5)
a
colnames(x[1]) <- c(z)
colnames(x[1]) <- c("z")
a
colnames(x) <- c("b","c")
a
colnames(a[1]) <- c("z")
a
colnames(a) <- c("b","c")
a
activityDayType <- activityImputing
activityDayType$date <- as.Date(activityDayType$date, "%Y-%m-%d")
for (i in 1 : nrow(x))
{
if (weekdays(activityDayType[i,2]) %in% c("Saturday", "Sunday"))
{
activityDayType[i, "daytype"] <- "Weekend"
}
else
{
activityDayType[i, "daytype"] <- "weekday"
}
}
str(activityDayType)
activityDayType_PerDayAvg = tapply(activityDayType$steps, activityDayType$daytype, mean, na.rm = T)
plot(activityDayType_PerDayAvg ~ unique(activityDayType$daytype), type="l", main = "Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days", xlab = "5-min interval", ylab= "Average Number of Steps")
plot(activityDayType_PerDayAvg ~ unique(activityDayType$interval), type="l", main = "Time Series Plot of the 5-minute Interval and the Average Number of Steps taken, averaged across all days", xlab = "5-min interval", ylab= "Average Number of Steps")
plot(activityDayType_PerDayAvg ~ unique(activityDayType$interval), type="l", data = activityDayType_PerDayAvg)
library(lattice)
xyplot(activityDayType_PerDayAvg$steps ~ activityDayType_PerDayAvg$interval | activityDayType_PerDayAvg$daytype, data = activityDayType_PerDayAvg, type = "b", layout = c(1, 2))
names(activityDayType)
steps<-activityDayType_PerDayAvg$steps
interval<-activityDayType_PerDayAvg$interval
daytype<-activityDayType_PerDayAvg$daytype
library(lattice)
xyplot(steps ~ interval | daytype, data = activityDayType_PerDayAvg, type = "l", layout = c(1, 2))
names(activityDayType)
steps<-as.numeric(activityDayType_PerDayAvg$steps)
interval<-unique(activityDayType_PerDayAvg$interval)
daytype<-rep(activityDayType_PerDayAvg$daytype)
df<-data.frame(steps,date,interval,daytype)
library(lattice)
xyplot(steps ~ interval | daytype, data = activityDayType_PerDayAvg, type = "l", layout = c(1, 2))
steps<-as.numeric(activityDayType_PerDayAvg$steps)
interval<-unique(activityDayType_PerDayAvg$interval)
daytype<-rep(activityDayType_PerDayAvg$daytype)
df<-data.frame(steps,date,interval,daytype)
library(lattice)
xyplot(steps ~ interval | daytype, data = df, type = "l", layout = c(1, 2))
steps<-as.numeric(activityDayType_PerDayAvg$steps)
interval<-unique(activityDayType_PerDayAvg$interval)
daytype<-rep(activityDayType_PerDayAvg$daytype)
df<-data.frame("steps","date","interval","daytype")
library(lattice)
xyplot(steps ~ interval | daytype, data = activityDayType_PerDayAvg, type = "l", layout = c(1, 2))
steps<-as.numeric(activityDayType_PerDayAvg$steps)
interval<-unique(activityDayType_PerDayAvg$interval)
daytype<-rep(activityDayType_PerDayAvg$daytype)
df<-data.frame("steps","date","interval","daytype")
library(lattice)
xyplot(steps ~ interval | daytype, data = activityDayType_PerDayAvg, type = "l", layout = c(1, 2))
names(activityDayType)
day.type.interv.steps <- activityDayType %.% group_by(interval, daytype) %.% summarise(avg.steps = mean(steps))
activityDayType_PerDayAvg = tapply(steps, daytype, activityDayType, mean, na.rm = T)
activityDayType_PerDayAvg = tapply(steps, daytype, data = activityDayType, mean, na.rm = T)
library(ggplot2)
activityDayTypeAgg <- aggregate(steps ~ interval + daytype, activityDayType, mean)
ggplot(activityDayTypeAgg, aes(x = interval, y = steps)) +
geom_line(color = "blue", size = 1) +
facet_wrap(~ daytype, nrow =2, ncol = 1) +
labs(x = "Interval", y = "Number of Steps")
plot(activityDayTypeAgg, aes(x = interval, y = steps)) +
facet_wrap(~ daytype, nrow =2, ncol = 1) +
labs(x = "Interval", y = "Number of Steps")
library(ggplot2)
activityDayTypeAgg <- aggregate(steps ~ interval + daytype, activityDayType, mean)
ggplot(activityDayTypeAgg, aes(x = interval, y = steps)) +
geom_line(color = "blue", size = 1) +
facet_wrap(~ daytype, nrow =2, ncol = 1) +
labs(x = "Interval", y = "Number of Steps")
install.packages("Formula")
library(knitr);knit()
knit("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
View(activity)
